begin public class LinkedList
	public class Terminator isa Object
	
	public class Link := (Terminator or LinkedList)

	Link next
	Object data

	begin public constructor new
		(Object initialData) to this
		next := Terminator
		data := initialData
	end constructor

	begin public constructor new
		(Object initialData, LinkedList initialNext) to this
		next := initialNext
		data := initialData
	end constructor
	
	begin public accessor this(Natural index) to (Object return)
		if index == 0
			return := data
		else
			return := next(index - 1)
		end if
	end function

	begin public function this.insertBefore(Object newData) to this
		this <- LinkedList.new(initialData=newData, initialNext=this)
	end function

	begin public function this.insertAfter(Object newData) to this
		next.insertBefore(newData)
	end function

	begin public function this.getNext to (LinkedList)
		if next isa LinkedList
			return := next asa LinkedList
		else
			return := EndOfListException.new(here)
		end if
	end function

	begin public function this.pop to this, (LinkedList return)
		return := LinkedList.new(initialData=data)
		this <- this.getNext()
	end function

	begin public function this.length to (Natural return)
		if next isa LinkedList
			return := next.length + 1
		else
			return := 0
		end if
	end function
end class
