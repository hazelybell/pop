begin public class LinkedList
	private field LinkedList next
	private field Object data

	public class Terminator

	begin public constructor new
		() to (this)
		next <- new()
		object <- Terminator.new()
	end constructor

	begin public constructor new
		(Object initialData) to (this)
		next <- new()
		data <- initialData
	end constructor

	begin public constructor new
		(Object initialData, LinkedList initialNext) to (this)
		next <- initialNext
		data <- initialData
	end constructor
	
	begin public function LinkedList
		(this, Natural index) to (Object return)
		if index == 0
			return := data
		else
			return := next(index - 1)
		end if
	end function

	begin public function insertBefore
		(this, Object newData) to (this)
		this <- LinkedList.new(newData, this)
	end function

	begin public function insertAfter
		(this, Object newData) to (this)
		next.insertBefore(newData)
	end function

	begin public function getNext
		(this) to (LinkedList return)
		return := next
	end function
end class
